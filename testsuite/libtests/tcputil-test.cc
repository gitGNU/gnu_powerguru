// 
//   Copyright (C) 2005 Free Software Foundation, Inc.
//
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation; either version 2 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <stdarg.h>
#include <signal.h>
#include <netinet/in.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <cstdio>
#include <iostream>
#include <sys/utsname.h>

#include "dejagnu.h"

#include "tcputil.h"
#include "tcpip.h"

using namespace std;

int verbosity;
static void usage (void);

TestState runtest;

int
main(int argc, char *argv[])
{
    int c;
    bool dump = false;
    string filespec;
    string procname, memname;
    
    while ((c = getopt (argc, argv, "hdv")) != -1) {
        switch (c) {
          case 'h':
            usage ();
            break;
            
          case 'd':
            dump = true;
            break;
            
          case 'v':
            verbosity++;
            break;
            
          default:
            usage ();
            break;
        }
    }
    
    // get the file name from the command line
    if (optind < argc) {
        filespec = argv[optind];
        cout << "Will use \"" << filespec << "\" for test " << endl;
    }

    Tcputil tcputil;
    const struct hostent  *host;
    const struct servent  *service;
    const struct protoent *proto;
    const in_addr_t             *addr;

    char hostname[MAXHOSTNAMELEN];
    gethostname(hostname, MAXHOSTNAMELEN);


    tcputil.toggleDebug(true);

    if (tcputil.numberOfInterfaces() >= 2)
        runtest.pass ("Tcputil::numberOfInterfaces()");
    else
        runtest.fail ("Tcputil::numberOfInterfaces()");
    
    // See if we can do host lookups
    host = tcputil.hostDataGet();
    addr = (in_addr_t *)host->h_addr_list[0];

#if 0
//    cerr << "Name is " << host->h_name << " IP is "
//         << inet_ntoa(*(struct in_addr *)host->h_addr_list[0]) << endl;
    
    cerr << "tcputil: Name is " << tcputil.hostNameGet() << " IP is " <<
        tcputil.hostIPNameGet() << endl;  
#endif
    
    if (strcmp(host->h_name, hostname) == 0)
        runtest.pass ("Tcputil::hostDataGet()");
    else
        runtest.fail ("Tcputil::hostData(Get)");

    if (host->h_name == tcputil.hostNameGet())
        runtest.pass ("Tcputil::hostNameGet()");
    else
        runtest.fail ("Tcputil::hostNameGet()");

    if ((in_addr_t *)host->h_addr_list[0] == tcputil.hostIPGet())
        runtest.pass ("Tcputil::hostIPGet()");
    else
        runtest.fail ("Tcputil::hostIPGet()");


    // See if we can do service lookups
    service = tcputil.lookupService("ftp", "tcp");

    if (strcmp(service->s_name, "ftp") == 0 &&
        strcmp(service->s_proto, "tcp") == 0 &&
        service->s_port == ntohs(21))
        runtest.pass ("Tcputil::lookupService(ftp)");
    else
        runtest.fail ("Tcputil::lookupService(ftp)");

    // See if we can do protocol lookups
    proto = tcputil.protoDataGet();
    if (strcmp(proto->p_name, "tcp") == 0 &&
        proto->p_proto == 6)
        runtest.pass ("Tcputil::protoDataGet()");
    else
        runtest.fail ("Tcputil::protoDataGet()");

    if (tcputil.protoNameGet() == "tcp")
        runtest.pass ("Tcputil::protoNameGet()");
    else
        runtest.fail ("Tcputil::protoNameGet()");

    if (tcputil.protoNumGet() == 6)
        runtest.pass ("Tcputil::protoNumGet()");
    else
        runtest.fail ("Tcputil::protoNumGet()");

    if (tcputil.hostByAddrGet() == tcputil.hostNameGet())
        runtest.pass ("Tcputil::hostByAddrGet()");
    else
        runtest.fail ("Tcputil::hostByAddrGet()");

    // If we are using IP aliasing, test them all
    if (tcputil.numberOfInterfaces() > 2) {
      // Get the IP number, increment it, and then get the new name
      in_addr_t       nodeaddr, netaddr;
      struct in_addr  newaddr;
      nodeaddr = inet_lnaof(*(struct in_addr *)tcputil.hostIPGet());
      netaddr = inet_netof(*(struct in_addr *)tcputil.hostIPGet());
      nodeaddr++;
      newaddr = inet_makeaddr(netaddr, nodeaddr);
      string newname = inet_ntoa(newaddr);
      
      // Get the node name part of the default hostname and add a 1 to it.
      char *ptr = strchr(hostname, '.');
      *ptr++ = '1';
      *ptr++ = 0;
      
      // Get the new name, and strip off the domain part
      string nodename = tcputil.hostByAddrGet(newname).substr(0, strlen(hostname));
      
      // the new node name should match the construct one. except on
      // machines in the ATC lab, which don't have multiple IP number
      // aliases.
      if ((nodename == hostname) || (nodename.substr(0, 3) == "atc"))
        runtest.pass ("Tcputil::hostByAddrGet(std::string)");
      else
        runtest.unresolved ("Tcputil::hostByAddrGet(std::string)");
    }
}

static void
usage (void)
{
    cerr << "This program tests the Global memory system." << endl;
    cerr << "Usage: tcputil [h] filename" << endl;
    cerr << "-h\tHelp" << endl;
    cerr << "-d\tDump parsed data" << endl;
    exit (-1);
}
