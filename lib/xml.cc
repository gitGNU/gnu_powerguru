// 
//   Copyright (C) 2005 Free Software Foundation, Inc.
//
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation; either version 2 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <sys/types.h>
#include <sys/stat.h>

#include <unistd.h>
#include <string>
#include <libxml/xmlmemory.h>
#include <libxml/parser.h>
#include <libxml/xmlreader.h>

#include "xml.h"
#include "log.h"
#include "err.h"

using namespace std;

extern LogFile dbglogfile;

XMLAttr::XMLAttr() : _name(0), _value(0)
{
#ifdef DEBUG_MEMORY_ALLOCATION
  log_msg("\t\tCreating XMLAttr data at %p \n", this);
#endif
}

XMLAttr::~XMLAttr()
{
#ifdef DEBUG_MEMORY_ALLOCATION
  dbglogfile << "Deleting XMLAttr object " << _name << " at " << this << endl;
#endif
  if (_name) {
    delete _name;
  }
  if (_value) {
    delete _value;
  }  
}
  
XMLNode::XMLNode()
{
#ifdef DEBUG_MEMORY_ALLOCATION
  dbglogfile << "Creating XMLNode data at " << this << endl;
#endif
  _name = 0;
  _value = 0;
}

XMLNode::~XMLNode()
{
  unsigned int i;
  //log_msg("%s: %p \n", __FUNCTION__, this);
#ifdef DEBUG_MEMORY_ALLOCATION
  log_msg("\tDeleting XMLNode data %s at %p\n", this->_name, this);
#endif
  
  for (i=0; i<_children.size(); i++) {
//     if (_children[i]->_name) {
//       delete _children[i]->_name;
//     }
//     if (_children[i]->_value) {
//       delete _children[i]->_value;
//     }
    delete _children[i];
  }

  for (i=0; i<_attributes.size(); i++) {
    //     if (_attributes[i]->_name) {
//       delete _attributes[i]->_name;
//     }
//     if (_attributes[i]->_value) {
//       delete _attributes[i]->_value;
//     }
    delete _attributes[i];
  }

  _children.clear();
  _attributes.clear();

  if (_name) {
    delete _name;
  }
  if (_value) {
    delete _value;
  }
  //  _value.set_undefined();
}

// XML Constructor
XML::XML(): _nodename(0)
{
#ifdef DEBUG_MEMORY_ALLOCATION
  dbglogfile << "Creating XML data at " << this << endl;
#endif
}


// Parse the ASCII XML string into memory
XML::XML(string xml_in)
{
#ifdef DEBUG_MEMORY_ALLOCATION
  dbglogfi le << "Creating XML data at " << this << endl;
#endif
  parseXML(xml_in);
}

XML::XML(struct node *childNode)
{
#ifdef DEBUG_MEMORY_ALLOCATION
  log_msg("\tCreating XML data at " << this << endl;
#endif
}

XML::~XML()
    {
#ifdef DEBUG_MEMORY_ALLOCATION
  if (this->_nodes) {
    fbglogfile << "Deleting XML top level node "
               << this->_nodes->_name " at " << this << endl;
  } else {
    dbglogfile << "Deleting XML top level node at " << this << endl;
  }
#endif
  
  delete _nodes;
}

XMLNode*
XML::extractNode(xmlNodePtr node, bool mem)
{
  xmlAttrPtr attr;
  xmlNodePtr childnode;
  xmlChar *ptr = NULL;
  XMLNode *element, *child;
  int len;

  element = new XMLNode;
            
  //log_msg("Created new element for %s at %p\n", node->name, element);
  memset(element, 0, sizeof (XMLNode));

  //log_msg("%s: extracting node %s\n", __FUNCTION__, node->name);

  // See if we have any Attributes (properties)
  attr = node->properties;
  while (attr != NULL) {
    //log_msg("extractNode %s has property %s, value is %s\n",
    //          node->name, attr->name, attr->children->content);
    XMLAttr *attrib = new XMLAttr;
    len = memadjust(strlen(reinterpret_cast<const char *>(attr->name))+1);
    attrib->_name = (char *)new char[len];
    memset(attrib->_name, 0, len);
    strcpy(attrib->_name, reinterpret_cast<const char *>(attr->name));
    len = memadjust(strlen(reinterpret_cast<const char *>(attr->children->content))+1);
    attrib->_value = (char *)new char[len];
    memset(attrib->_value, 0, len);
    strcpy(attrib->_value, reinterpret_cast<const char *>(attr->children->content));
    //log_msg("\tPushing attribute %s for element %s has value %s\n",
    //        attr->name, node->name, attr->children->content);
    element->_attributes.push_back(attrib);
    attr = attr->next;
  }

  len = memadjust(strlen(reinterpret_cast<const char *>(node->name))+1);
  element->_name = (char *)new char[len];
  memset(element->_name, 0, len);
  strcpy(element->_name, reinterpret_cast<const char *>(node->name));
  //element->_name = reinterpret_cast<const char *>(node->name);
  if (node->children) {
    //ptr = node->children->content;
    ptr = xmlNodeGetContent(node->children);
    if (ptr != NULL) {
      if ((strchr((const char *)ptr, '\n') == 0) && (ptr[0] != 0))
      {
        if (node->children->content == NULL) {
          //log_msg("Node %s has no contents\n", node->name);
        } else {
          //log_msg("extractChildNode from text for %s has contents %s\n", node->name, ptr);
          len = memadjust(strlen(reinterpret_cast<const char *>(ptr))+1);
          element->_value = (char *)new char[len];
          memset(element->_value, 0, len);
          strcpy(element->_value, reinterpret_cast<const char *>(ptr));
          //element->_value = reinterpret_cast<const char *>(ptr);
        }
      }
      xmlFree(ptr);
    }
  }

  // See if we have any data (content)
  childnode = node->children;

  while (childnode != NULL) {
    if (childnode->type == XML_ELEMENT_NODE) {
      //log_msg("\t\t extracting node %s\n", childnode->name);
      child = extractNode(childnode, mem);
      //if (child->_value.get_type() != as_value::UNDEFINED) {
      if (child->_value != 0) {
        //log_msg("\tPushing childNode %s, value %s on element %p\n", child->_name.c_str(), child->_value.to_string(), element);
      } else {
        //log_msg("\tPushing childNode %s on element %p\n", child->_name.c_str(), element);
      }
      element->_children.push_back(child);
    }
    childnode = childnode->next;
  }

  return element;
}

// Read in an XML document from the specified source
bool
XML::parseDoc(xmlDocPtr document, bool mem)
{
  XMLNode *top;
  xmlNodePtr cur;

  if (document == 0) {
    dbglogfile << "ERROR: Can't load XML file!";
    return false;
  }

  cur = xmlDocGetRootElement(document);
  
  if (cur != NULL) {
    top = extractNode(cur, mem);
    //_nodes->_name = reinterpret_cast<const char *>(cur->name);
    _nodes = top;
    //_node_data.push_back(top);
    //cur = cur->next;
  }  

  return true;
}

// This reads in an XML file from disk and parses into into a memory resident
// tree which can be walked through later.
bool
XML::parseXML(string xml_in)
{
  bool ret = true;
  // dbglogfile << "Parse XML from memory: " << xml_in << endl;

  if (xml_in.size() == 0) {
    dbglogfile << "ERROR: XML data is empty!" << endl;
    return false;
  }

#ifndef USE_DMALLOC
  //dump_memory_stats(__FUNCTION__, __LINE__, "before xmlParseMemory");
#endif

#ifdef USE_XMLREADER
  XMLNode *node = 0;
  xmlTextReaderPtr reader;

  reader = xmlReaderForMemory(xml_in.c_str(), xml_in.size(), NULL, NULL, 0);
  if (reader != NULL) {
    ret = true;
    while (ret) {
      ret = xmlTextReaderRead(reader);
      node = processNode(reader, node);
    }
    xmlFreeTextReader(reader);
    if (ret != false) {
      dbglogfile << "couldn't parse" << xml_in << endl;
      return false;
    }
  } else {
    dbglogfile << "Unable to open " << xml_in << endl;
    return false;
  }
  xmlCleanupParser();
  return true;
#else
#ifdef USE_DOM
  xmlInitParser();
  
  _doc = xmlParseMemory(xml_in.c_str(), xml_in.size());
  if (_doc == 0) {
    dbglogfile << "ERROR: Can't parse XML data!" << endl;
    return false;
  }
  ret = parseDoc(_doc, true);
  xmlCleanupParser();
  xmlFreeDoc(_doc);
  xmlMemoryDump();
#endif
#ifndef USE_DMALLOC
  //dump_memory_stats(__FUNCTION__, __LINE__, "after xmlParseMemory");
#endif

  return ret;
#endif
  
}

//     XML_READER_TYPE_NONE = 0
//     XML_READER_TYPE_ELEMENT = 1,
//     XML_READER_TYPE_ATTRIBUTE = 2,
//     XML_READER_TYPE_TEXT = 3,
//     XML_READER_TYPE_COMMENT = 8,
//     XML_READER_TYPE_SIGNIFICANT_WHITESPACE = 14,
//     XML_READER_TYPE_END_ELEMENT = 15,
//
// processNode:
// 2 1 IP 0
// processNode:
// 3 3 #text 0 192.168.2.50
// processNode:
// 2 15 IP 0
// processNode:
// 2 14 #text 0
const char *tabs[] = {
  "",
  "\t",
  "\t\t",
  "\t\t\t",
  "\t\t\t",
  "\t\t\t\t",
};

#ifdef USE_XMLREADER
// This is an xmlReader (SAX) based parser. For some reason it core dumps
// when compiled with GCC 3.x, but works just fine with GCC 4.x.
XMLNode*
XML::processNode(xmlTextReaderPtr reader, XMLNode *node)
{
  // dbglogfile << " node is " << node << endl;
  static XMLNode *parent[10];
  xmlChar *name, *value;
  int   depth;
  XMLNode *element;
  xmlReaderTypes type;

  if (node == 0) {
    memset(parent, 0, sizeof(XMLNode *));
  }
  type = (xmlReaderTypes)xmlTextReaderNodeType(reader);
  depth = xmlTextReaderDepth(reader);
  value = xmlTextReaderValue(reader);
  name = xmlTextReaderName(reader);
  
  if (name == NULL)
    name = xmlStrdup(BAD_CAST "--");

#if 0
  printf("%d %d %s %d\n",
         depth,
         (int)type,
         name,
         xmlTextReaderIsEmptyElement(reader));  
#endif

  
  //child = node->_children[0];
  switch(xmlTextReaderNodeType(reader)) {
  case XML_READER_TYPE_NONE:
    break;
  case XML_READER_TYPE_SIGNIFICANT_WHITESPACE: // This is an empty text node
    //dbglogfile << "Whitespace at depth " << depth << endl;
    break;
  case XML_READER_TYPE_END_ELEMENT:
     if (depth == 0) {          // This is the last node in the file
       element = node;
       break;
     }
     parent[depth]->_children.push_back(element);
     //      dbglogfile << "Pushing element XXX on node "
     //                 << node->_name << parent[depth]->_name << endl;
     //       dbglogfile << "End element at depth %d is %s for parent %s %p\n", depth, name,
//               parent[depth]->_name, parent[depth]);
     element = parent[depth];
    break;
  case XML_READER_TYPE_ELEMENT:
    element = new XMLNode;
//      log_msg("%sElement at depth %d is %s for node at %p\n", tabs[depth], depth, name, element);
    element->_name = (char *)new char[strlen(reinterpret_cast<const char *>(name))+1];
    memset(element->_name, 0, strlen(reinterpret_cast<const char *>(name))+1);
    strcpy(element->_name, reinterpret_cast<const char *>(name));
    if (node == 0) {
      _nodes = element;
      parent[0] = element;
    } else {
      parent[depth] = node;
      parent[depth+1] = node;
    }
    //  xmlTextReaderAttributeCount(reader);
    if (xmlTextReaderHasAttributes(reader)) {
      // log_msg("Has Attributes!\n");
      xmlTextReaderMoveToFirstAttribute(reader);
      processNode(reader, element);
      while(xmlTextReaderMoveToNextAttribute(reader)) {
        processNode(reader, element);
      }
    }
    break;
  case XML_READER_TYPE_TEXT:
    element = node;
//      log_msg("%sValue at depth %d is \"%s\" for node at %p\n", tabs[depth], depth, value, element);
    element->_value = (char *)new char[strlen(reinterpret_cast<const char *>(value))+1];
    memset(element->_value, 0, strlen(reinterpret_cast<const char *>(value))+1);
    strcpy(element->_value, reinterpret_cast<const char *>(value));
    break;
  case XML_READER_TYPE_ATTRIBUTE:
    element = node;
    XMLAttr *attrib = new XMLAttr;
    attrib->_name = (char *)new char[strlen(reinterpret_cast<const char *>(name))+1];
    memset(attrib->_name, 0, strlen(reinterpret_cast<const char *>(name))+1);
    strcpy(attrib->_name, reinterpret_cast<const char *>(name));
    attrib->_value = (char *)new char[strlen(reinterpret_cast<const char *>(value))+1];
    memset(attrib->_value, 0, strlen(reinterpret_cast<const char *>(value))+1);
    strcpy(attrib->_value, reinterpret_cast<const char *>(value));
//     log_msg("%sPushing attribute %s, value \"%s\" for node %s\n", tabs[depth], name, value, element->_name);
    element->_attributes.push_back(attrib);
    break;
  default:   // FIXME: why does this break GCC 3.3.3 but not 3.4.3 ?
    log_error("Unsupported XML type %d\n!", type);
    break;
  };

  xmlFree(name);
  if (value != NULL) {
    xmlFree(value);
  }
  //previous_depth = depth;
  return element;
}
#endif

// This reads in an XML file from disk and parses into into a memory resident
// tree which can be walked through later.
bool
XML::load(const char *filespec)
{
  bool ret = true;
  dbglogfile << "Load disk XML file: " << filespec << endl;
  
  //log_msg("%s: mem is %d\n", __FUNCTION__, mem);

#ifdef USE_XMLREADER
  XMLNode *node = 0;
  xmlTextReaderPtr reader;  
  
  reader = xmlNewTextReaderFilename(filespec);
  if (reader != NULL) {
    ret = true;
    while (ret) {
      ret = xmlTextReaderRead(reader);
      node = processNode(reader, node);
    }
    xmlFreeTextReader(reader);
    if (ret != false) {
      dbglogfile << "couldn't parse" << filespec << endl;
      return false;
    }
  } else {
    dbglogfile << "ERROR: Unable to open %s\n" << filespec << endl;
      return false;
  }
  xmlCleanupParser();
  return true;
#else
#ifdef USE_DOM
  xmlInitParser();
  _doc = xmlParseFile(filespec);
  if (_doc == 0) {
    dbglogfile << "ERROR: Can't load XML file: " << filespec << endl;
    return false;
  }
  ret = parseDoc(_doc, false);
  xmlCleanupParser();
  xmlFreeDoc(_doc);
  xmlMemoryDump();
  return true;
#else
#error "You have to enable either a DOM or an xmlReader XML parser"
#endif
#endif
}

XMLNode *
XML::operator [] (int x) {
  return _nodes->_children[x];
}

#if 0
as_object *
XML::setupFrame(as_object *obj, XMLNode *xml, bool mem)
{
  int           child, i;
  const char    *nodename;
  //const char    *nodevalue;
  //AS_value      nodevalue;
  int           length;
  as_value      inum;
  XMLNode       *childnode;
  xmlnode_as_object *xmlchildnode_obj;
  xmlattr_as_object* attr_obj;

  //log_msg("\t%s: processing node %s for object %p, mem is %d\n", __FUNCTION__, xml->_name, obj, mem);
  
  // Get the data for this node
  nodename   = xml->_name;
  //nodename   = xml->_name.c_str();
  //nodevalue  = xml->_value;
  length     = xml->length();

  // Set these members in the top level object passed in. This are used
  // primarily by the disk based XML parser, where at least in all my current
  // test cases this is referenced with firstChild first, then nodeName and
  // childNodes.
  obj->set_member("nodeName",           nodename);
  obj->set_member("length",             length);
  if (xml->_value != 0) {
    obj->set_member("nodeValue",        xml->_value);
    //log_msg("\tnodevalue for %s is: %s\n", nodename, xml->_value);
  } else {
    obj->set_member("nodeValue", as_value::UNDEFINED);
  }

//   if (nodevalue.get_type() != as_value::UNDEFINED) {
//     obj->set_member("nodeValue",        nodevalue.to_string());
//     log_msg("\tnodevalue for %s is: %s\n", nodename, nodevalue.to_string());
//   } else {
//     // If there is no value, we want to define it as an empty
//     // string.
//     obj->set_member("nodeValue", "");
//   }

  
  // Process the attributes, if any
  if (xml->_attributes.size() == 0) {
    //log_msg("\t\tNo attributes for node %s, created empty object at %p\n", nodename, attr_obj);
//     log_msg("\t\tNo attributes for node %s\n", nodename);
  } else {
    attr_obj = new xmlattr_as_object;
    for (i=0; i<xml->_attributes.size(); i++) {
      attr_obj->set_member(xml->_attributes[i]->_name, xml->_attributes[i]->_value);
//        log_msg("\t\tAdding attribute as member %s, value is %s to node %s (%p)\n",
//                xml->_attributes[i]->_name,
//                xml->_attributes[i]->_value, nodename, obj);
    }
    obj->set_member("attributes", attr_obj);
  }

  //xml->_attributes.resize(0);
  //obj->set_member("attributes", attr_obj);

  // Process the children, if there are any
  if (length) {
    //log_msg("\tProcessing %d children nodes for %s\n", length, nodename);
    inum = 0;
    for (child=0; child<length; child++) {
      // Create a new AS object for this node's children
      xmlchildnode_obj = new xmlnode_as_object;
      // When parsing XML from memory, the test movies I have expect the firstChild
      // to be the first element of the array instead.
      if (mem) {
        childnode = xml;
        //obj->set_member(inum.to_string(), obj);
        //inum += 1;
        //childnode = xml->_children[child];
      } else {
        childnode = xml->_children[child];
      }
      setupFrame(xmlchildnode_obj, childnode, false); // setup child node
      obj->set_member(inum.to_string(), xmlchildnode_obj);
      inum += 1;
    }
  } else {
    //log_msg("\tNode %s has no children\n", nodename);
  }  

  return obj;
}

#endif  

int
memadjust(int x)
{
  return (x + (4 - x % 4));
}
